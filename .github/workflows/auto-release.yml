name: Build binaries with PyInstaller and Draft Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  check-version-commit:
    runs-on: ubuntu-latest
    outputs:
      matched: ${{ steps.check.outputs.matched }}
      tag: ${{ steps.check.outputs.tag }}
      title: ${{ steps.check.outputs.title }}
      body: ${{ steps.check.outputs.body }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check commit message for version pattern
        id: check
        run: |
          COMMIT_TITLE="$(git log -1 --pretty=%s)"
          COMMIT_BODY="$(git log -1 --pretty=%b)"
          if [[ "$COMMIT_TITLE" =~ ^(v[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+) ]]; then
            TAG="${BASH_REMATCH[1]}"
            echo "matched=true" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "title=$COMMIT_TITLE" >> $GITHUB_OUTPUT
            # Replace newlines in body for safe output
            echo "body<<EOF" >> $GITHUB_OUTPUT
            echo "$COMMIT_BODY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "matched=false" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build on ${{ matrix.os }}
    needs: check-version-commit
    if: needs.check-version-commit.outputs.matched == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install system dependencies for wxPython
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libglib2.0-dev libgstreamer1.0-dev \
          libgstreamer-plugins-base1.0-dev libgtk-3-0
        if: runner.os == 'Linux'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile --add-data "EDXD/resources:resources" EDXD/ed-eXploration-dashboard.py
        shell: bash

      - name: Prepare release directory
        run: |
          mkdir release
          cp dist/ed-eXploration-dashboard* release/
          mkdir -p release/resources
          cp EDXD/resources/edxd_128.png release/resources/
        shell: bash

      - name: Archive release for Linux/macOS
        if: runner.os != 'Windows'
        run: |
          tar -czvf edxd-dashboard-${{ runner.os }}.tar.gz -C release .
        shell: bash

      - name: Archive release for Windows
        if: runner.os == 'Windows'
        run: |
          powershell Compress-Archive -Path release\* -DestinationPath edxd-dashboard-${{ runner.os }}.zip

      - name: Rename Ubuntu/Mint artifact for clarity
        if: runner.os == 'Linux'
        run: mv edxd-dashboard-Linux.tar.gz edxd-dashboard-Linux_ubuntu_mint.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: edxd-dashboard-${{ runner.os }}
          path: |
            edxd-dashboard-${{ runner.os }}_ubuntu_mint.tar.gz
            edxd-dashboard-${{ runner.os }}.tar.gz
            edxd-dashboard-${{ runner.os }}.zip

  build-debian:
    name: Build on Debian (via Docker)
    needs: check-version-commit
    if: needs.check-version-commit.outputs.matched == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build in Debian Docker container
        uses: addnab/docker-run-action@v3
        with:
          image: debian:stable
          options: -v ${{ github.workspace }}:/workspace
          run: |
            apt-get update
            apt-get install -y python3 python3-pip build-essential libgtk-3-dev libglib2.0-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
            pip3 install pyinstaller
            pip3 install -r /workspace/requirements.txt
            cd /workspace
            pyinstaller --onefile --add-data "EDXD/resources:resources" EDXD/ed-eXploration-dashboard.py
            mkdir /workspace/release
            cp /workspace/dist/ed-eXploration-dashboard* /workspace/release/
            mkdir -p /workspace/release/resources
            cp /workspace/EDXD/resources/edxd_128.png /workspace/release/resources/
            tar -czvf /workspace/edxd-dashboard-debian.tar.gz -C /workspace/release .
      - name: Upload Debian build artifact
        uses: actions/upload-artifact@v4
        with:
          name: edxd-dashboard-debian
          path: edxd-dashboard-debian.tar.gz

  build-arch:
    name: Build on Arch (via Docker)
    needs: check-version-commit
    if: needs.check-version-commit.outputs.matched == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build in Arch Docker container
        uses: addnab/docker-run-action@v3
        with:
          image: archlinux:latest
          options: -v ${{ github.workspace }}:/workspace
          run: |
            pacman -Syu --noconfirm
            pacman -S --noconfirm python python-pip gtk3 glib2 gstreamer gst-plugins-base base-devel
            pip install pyinstaller
            pip install -r /workspace/requirements.txt
            cd /workspace
            pyinstaller --onefile --add-data "EDXD/resources:resources" EDXD/ed-eXploration-dashboard.py
            mkdir /workspace/release
            cp /workspace/dist/ed-eXploration-dashboard* /workspace/release/
            mkdir -p /workspace/release/resources
            cp /workspace/EDXD/resources/edxd_128.png /workspace/release/resources/
            tar -czvf /workspace/edxd-dashboard-arch.tar.gz -C /workspace/release .
      - name: Upload Arch build artifact
        uses: actions/upload-artifact@v4
        with:
          name: edxd-dashboard-arch
          path: edxd-dashboard-arch.tar.gz

  tag-and-release:
    name: Tag & Create GitHub Release
    needs: [build, build-debian, build-arch, check-version-commit]
    runs-on: ubuntu-latest
    if: needs.check-version-commit.outputs.matched == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Determine previous tag
        id: prev_tag
        run: |
          CURRENT="${{ needs.check-version-commit.outputs.tag }}"
          # List all tags except current, sorted by semver descending
          PREV=$(git tag --sort=-v:refname | grep -v "^$CURRENT$" | head -n1)
          if [ -z "$PREV" ]; then
            PREV=$CURRENT
          fi
          echo "prev_tag=$PREV" >> $GITHUB_OUTPUT

      - name: Create new tag if not exists
        run: |
          TAG="${{ needs.check-version-commit.outputs.tag }}"
          # Check if the tag exists
          if ! git tag | grep -q "^$TAG$"; then
            git tag "$TAG"
            git push origin "$TAG"
          fi
          
      - name: Write release notes
        id: relnotes
        run: |
          echo "${{ needs.check-version-commit.outputs.body }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "**Full Changelog**: https://github.com/Kepas-Beleglorn/EDXD/compare/${{ steps.prev_tag.outputs.prev_tag }}...${{ needs.check-version-commit.outputs.tag }}" >> RELEASE_NOTES.md

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: List downloaded files
        run: ls -R dist

      - name: Create or update GitHub Release (draft)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check-version-commit.outputs.tag }}
          name: ${{ needs.check-version-commit.outputs.title }}
          body_path: RELEASE_NOTES.md
          draft: false
          make_latest: true
          files: |
            dist/**/*.tar.gz
            dist/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
          
          
          
          
